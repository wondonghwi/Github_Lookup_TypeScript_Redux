{"version":3,"sources":["modules/github/index.ts","modules/github/reducer.ts","api/github.ts","modules/github/thunk.ts","modules/github/actions.ts","components/GithubUsernameForm.tsx","components/GithubProfileInfo.tsx","container/GithubProfileLoader.tsx","App.tsx","reportWebVitals.ts","modules/todos/action.ts","modules/todos/reducer.ts","modules/index.ts","index.tsx"],"names":["github","createReducer","userProfile","loading","error","data","GET_USER_PROFILE","state","GET_USER_PROFILE_SUCCESS","action","payload","GET_USER_PROFILE_ERROR","getUserProfile","username","a","axios","get","response","getUserProfileThunk","dispatch","request","getUserProfileAsync","success","failure","createAsyncAction","GithubUsernameForm","onSubmitUsername","useState","input","setInput","onSubmit","e","preventDefault","className","onChange","target","value","placeholder","GithubProfileInfo","name","thumbnail","bio","blog","src","alt","href","GithubProfileLoader","useSelector","useDispatch","style","textAlign","avatar_url","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","nextId","addTodo","createAction","text","id","done","toggleTodo","removeTodo","todos","handleAction","concat","map","todo","filter","rootReducer","combineReducers","store","createStore","applyMiddleware","Thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d98f9bc.chunk.js","sourcesContent":["export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunk';\n","import { GithubAction, GithubState } from './types';\nimport { createReducer } from 'typesafe-actions';\nimport { GET_USER_PROFILE, GET_USER_PROFILE_ERROR, GET_USER_PROFILE_SUCCESS } from './actions';\n\nconst initalState: GithubState = {\n  userProfile: {\n    loading: false,\n    error: null,\n    data: null,\n  },\n};\n\nconst github = createReducer<GithubState, GithubAction>(initalState, {\n  [GET_USER_PROFILE]: state => ({\n    ...state,\n    userProfile: {\n      loading: true,\n      error: null,\n      data: null,\n    },\n  }),\n  [GET_USER_PROFILE_SUCCESS]: (state, action) => ({\n    ...state,\n    userProfile: {\n      loading: false,\n      error: null,\n      data: action.payload,\n    },\n  }),\n  [GET_USER_PROFILE_ERROR]: (state, action) => ({\n    ...state,\n    userProfile: {\n      loading: false,\n      error: action.payload,\n      data: null,\n    },\n  }),\n});\n\nexport default github;\n","import axios from 'axios';\n\nexport const getUserProfile = async (username: string) => {\n  const response = await axios.get<GithubProfile>(`https://api.github.com/users/${username}`);\n  return response.data;\n};\n\nexport interface GithubProfile {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  name: string;\n  company: string;\n  blog: string;\n  location: null;\n  email: null;\n  hireable: null;\n  bio: string;\n  public_repos: number;\n  public_gists: number;\n  followers: number;\n  following: number;\n  created_at: Date;\n  updated_at: Date;\n}\n","import { Dispatch } from 'redux';\nimport { getUserProfileAsync } from './actions';\nimport { getUserProfile } from '../../api/github';\n\nexport const getUserProfileThunk = (username: string) => {\n  return async (dispatch: Dispatch) => {\n    const { request, success, failure } = getUserProfileAsync;\n    dispatch(request());\n    try {\n      const userProfile = await getUserProfile(username);\n      dispatch(success(userProfile));\n    } catch (e) {\n      dispatch(failure(e));\n    }\n  };\n};\n","import { createAsyncAction } from 'typesafe-actions';\nimport { GithubProfile } from '../../api/github';\nimport { AxiosError } from 'axios';\n\nexport const GET_USER_PROFILE = 'github/GET_USER_PROFILE';\nexport const GET_USER_PROFILE_SUCCESS = 'github/GET_USER_PROFILE_SUCCESS';\nexport const GET_USER_PROFILE_ERROR = 'github/GET_USER_PROFILE_ERROR';\n\nexport const getUserProfileAsync = createAsyncAction(\n  GET_USER_PROFILE,\n  GET_USER_PROFILE_SUCCESS,\n  GET_USER_PROFILE_ERROR\n)<undefined, GithubProfile, AxiosError>();\n","import { useState } from 'react';\nimport './GithubUsernameForm.css';\n\ninterface GithubUsernameFormProps {\n  onSubmitUsername: (username: string) => void;\n}\n\nconst GithubUsernameForm = ({ onSubmitUsername }: GithubUsernameFormProps) => {\n  const [input, setInput] = useState('');\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSubmitUsername(input);\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"GithubUsernameForm\">\n      <input onChange={onChange} value={input} placeholder=\"Github 계정명을 입력하세요.\" />\n      <button>조회</button>\n    </form>\n  );\n};\n\nexport default GithubUsernameForm;\n","import React from 'react';\nimport './GithubProfileInfo.css';\n\ninterface GithubProfileInfoProps {\n  name: string;\n  thumbnail: string;\n  bio: string;\n  blog: string;\n}\n\nconst GithubProfileInfo = ({ name, thumbnail, bio, blog }: GithubProfileInfoProps) => {\n  return (\n    <div className=\"GithubProfileInfo\">\n      <div className=\"profile-head\">\n        <img src={thumbnail} alt=\"user thumbnail\" />\n        <div>{name}</div>\n      </div>\n      <p>{bio}</p>\n      <div>{blog !== '' && <a href={blog}>블로그</a>}</div>\n    </div>\n  );\n};\n\nexport default GithubProfileInfo;\n","import React from 'react';\nimport GithubUsernameForm from '../components/GithubUsernameForm';\nimport GithubProfileInfo from '../components/GithubProfileInfo';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../modules';\nimport { getUserProfileThunk } from '../modules/github';\n\nconst GithubProfileLoader = () => {\n  const { data, loading, error } = useSelector((state: RootState) => state.github.userProfile);\n  const dispatch = useDispatch();\n\n  const onSubmitUsername = (username: string) => {\n    dispatch(getUserProfileThunk(username));\n  };\n  return (\n    <>\n      <GithubUsernameForm onSubmitUsername={onSubmitUsername} />\n      {loading && <p style={{ textAlign: 'center' }}>로딩중...</p>}\n      {error && <p style={{ textAlign: 'center' }}>에러발생!...</p>}\n      {data && <GithubProfileInfo name={data.name} thumbnail={data.avatar_url} bio={data.bio} blog={data.blog} />}\n    </>\n  );\n};\n\nexport default GithubProfileLoader;\n","import React from 'react';\nimport GithubProfileLoader from './container/GithubProfileLoader';\n\nconst App = () => {\n  return (\n    <div>\n      <GithubProfileLoader />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createAction } from 'typesafe-actions';\n\nlet nextId = 2;\n\nexport interface Todo {\n  id: number;\n  text: string;\n  done: boolean;\n}\n\nexport const addTodo = createAction('todos/ADD_TODO', (text: string) => ({\n  id: nextId++,\n  text,\n  done: false,\n}))<Todo>();\nexport const toggleTodo = createAction('todos/TOGGLE_TODO')<number>();\nexport const removeTodo = createAction('todos/REMOVE_TODO')<number>();\n","import { createReducer } from 'typesafe-actions';\nimport { Todo, TodosAction } from './types';\nimport { addTodo, removeTodo, toggleTodo } from './action';\n\nconst initialState: Todo[] = [\n  {\n    id: 1,\n    text: 'first',\n    done: false,\n  },\n];\n\nconst todos = createReducer<Todo[], TodosAction>(initialState)\n  .handleAction(addTodo, (state, action) =>\n    state.concat({\n      id: action.payload.id,\n      text: action.payload.text,\n      done: false,\n    })\n  )\n  .handleAction(toggleTodo, (state, action) =>\n    state.map(todo => (todo.id === action.payload ? { ...todo, done: !todo.done } : todo))\n  )\n  .handleAction(removeTodo, (state, action) => state.filter(todo => todo.id !== action.payload));\n\nexport default todos;\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport github from './github';\n\nconst rootReducer = combineReducers({\n  todos,\n  github,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './modules';\nimport { Provider } from 'react-redux';\nimport Thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(Thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}